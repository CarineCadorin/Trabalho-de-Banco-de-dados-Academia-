-- Tabela Aluno
CREATE TABLE Aluno (
    ID_Aluno SERIAL PRIMARY KEY,
    Nome VARCHAR(100) NOT NULL,
    DataNasc DATE NOT NULL,
    Endereco VARCHAR(255) NOT NULL,
    Telefone VARCHAR(20) NOT NULL,
    Email VARCHAR(100) NOT NULL,
    DataInicio DATE NOT NULL,
    Status VARCHAR(50) NOT NULL
);

-- Tabela Instrutor
CREATE TABLE Instrutor (
    ID_Instrutor SERIAL PRIMARY KEY,
    Nome VARCHAR(100) NOT NULL,
    Especialidade VARCHAR(100) NOT NULL,
    Certificacoes VARCHAR(255) NOT NULL,
    AnosExperiencia INT NOT NULL,
    Email VARCHAR(100) NOT NULL
);

-- Tabela Equipamento
CREATE TABLE Equipamento (
    ID_Equipamento SERIAL PRIMARY KEY,
    Nome VARCHAR(100) NOT NULL,
    Tipo VARCHAR(100) NOT NULL,
    Quantidade INT NOT NULL,
    DataAquisicao DATE NOT NULL,
    Estado VARCHAR(50) NOT NULL,
    ManutencaoPendente BOOLEAN NOT NULL
);

-- Tabela Plano-de-Treinamento
CREATE TABLE Plano_de_Treinamento (
    ID_Plano SERIAL PRIMARY KEY,
    Nome VARCHAR(100) NOT NULL,
    Descricao TEXT NOT NULL,
    Duracao INT NOT NULL,
    DataInicio DATE NOT NULL,
    DataFim DATE NOT NULL,
    ID_Equipamento INT NOT NULL,
    FOREIGN KEY (ID_Equipamento) REFERENCES Equipamento(ID_Equipamento)
);

-- Tabela Avaliação-Física
CREATE TABLE Avaliacao_Fisica (
    ID_Avaliacao SERIAL PRIMARY KEY,
    ID_Aluno INT NOT NULL,
    ID_Instrutor INT NOT NULL,
    Data DATE NOT NULL,
    Peso DECIMAL(5, 2) NOT NULL,
    Altura DECIMAL(4, 2) NOT NULL,
    GorduraCorp DECIMAL(5, 2) NOT NULL,
    MassaMagra DECIMAL(5, 2) NOT NULL,
    Pressao VARCHAR(20) NOT NULL,
    Observacoes TEXT NOT NULL,
    FOREIGN KEY (ID_Aluno) REFERENCES Aluno(ID_Aluno),
    FOREIGN KEY (ID_Instrutor) REFERENCES Instrutor(ID_Instrutor)
);

-- Tabela Inscrição
CREATE TABLE Inscricao (
    ID_Inscricao SERIAL PRIMARY KEY,
    ID_Aluno INT NOT NULL,
    ID_Plano INT NOT NULL,
    DataInscricao DATE NOT NULL,
    Status VARCHAR(50) NOT NULL,
    DataExpiracao DATE NOT NULL,
    FOREIGN KEY (ID_Aluno) REFERENCES Aluno(ID_Aluno),
    FOREIGN KEY (ID_Plano) REFERENCES Plano_de_Treinamento(ID_Plano)
);

-- Tabela Treino
CREATE TABLE Treino (
    ID_Aula SERIAL PRIMARY KEY,
    ID_Instrutor INT NOT NULL,
    ID_Equipamento INT NOT NULL,
    Horario TIME NOT NULL,
    Duracao INT NOT NULL,
    Capacidade INT NOT NULL,
    Sala VARCHAR(100) NOT NULL,
    FOREIGN KEY (ID_Instrutor) REFERENCES Instrutor(ID_Instrutor),
    FOREIGN KEY (ID_Equipamento) REFERENCES Equipamento(ID_Equipamento)
);

-- Tabela Check-in/Check-out
CREATE TABLE Check_in_Check_out (
    ID_Checkin SERIAL PRIMARY KEY,
    ID_Aluno INT NOT NULL,
    Data DATE NOT NULL,
    HoraEntrada TIME NOT NULL,
    HoraSaida TIME NOT NULL,
    FOREIGN KEY (ID_Aluno) REFERENCES Aluno(ID_Aluno)
);

-- Tabela Pagamento
CREATE TABLE Pagamento (
    ID_Pagamento SERIAL PRIMARY KEY,
    ID_Aluno INT NOT NULL,
    Valor DECIMAL(10, 2) NOT NULL,
    Data DATE NOT NULL,
    Metodo VARCHAR(50) NOT NULL,
    Status VARCHAR(50) NOT NULL,
    FOREIGN KEY (ID_Aluno) REFERENCES Aluno(ID_Aluno)
);


-- Populando a tabela Equipamento
INSERT INTO Equipamento (Nome, Tipo, Quantidade, DataAquisicao, Estado, ManutencaoPendente)
VALUES
('Esteira', 'Cardio', 10, '2022-01-01', 'Bom', false),
('Bicicleta', 'Cardio', 5, '2022-02-01', 'Bom', false),
('Halteres', 'Musculação', 20, '2022-03-01', 'Bom', false),
('Máquina de Remo', 'Cardio', 2, '2022-04-01', 'Ruim', true),
('Leg Press', 'Musculação', 1, '2022-05-01', 'Bom', false),
('Elíptico', 'Cardio', 3, '2022-06-01', 'Bom', false),
('Cadeira Extensora', 'Musculação', 4, '2022-07-01', 'Bom', false),
('Puxador', 'Musculação', 2, '2022-08-01', 'Ruim', true),
('Bicicleta Horizontal', 'Cardio', 3, '2022-09-01', 'Bom', false),
('Esteira Curva', 'Cardio', 2, '2022-10-01', 'Ruim', true),
('Smith Machine', 'Musculação', 1, '2022-11-01', 'Bom', false),
('Banco Supino', 'Musculação', 5, '2022-12-01', 'Bom', false),
('Step', 'Cardio', 10, '2023-01-01', 'Bom', false),
('Corda de Pular', 'Cardio', 15, '2023-02-01', 'Bom', false),
('Kettlebell', 'Musculação', 25, '2023-03-01', 'Bom', false);


-- Populando a tabela Aluno
INSERT INTO Aluno (Nome, DataNasc, Endereco, Telefone, Email, DataInicio, Status)
VALUES
('Carlos Silva', '1990-05-10', 'Rua A, 123', '1111-1111', 'carlos@email.com', '2023-01-01', 'Ativo'),
('Maria Oliveira', '1985-08-22', 'Rua B, 456', '2222-2222', 'maria@email.com', '2023-02-01', 'Ativo'),
('João Souza', '1992-07-15', 'Rua C, 789', '3333-3333', 'joao@email.com', '2023-03-01', 'Inativo'),
('Ana Santos', '1988-11-30', 'Rua D, 101', '4444-4444', 'ana@email.com', '2023-04-01', 'Ativo'),
('Pedro Lima', '1995-12-12', 'Rua E, 202', '5555-5555', 'pedro@email.com', '2023-05-01', 'Ativo'),
('Paula Mendes', '1991-09-20', 'Rua F, 303', '6666-6666', 'paula@email.com', '2023-06-01', 'Inativo'),
('Ricardo Alves', '1983-04-18', 'Rua G, 404', '7777-7777', 'ricardo@email.com', '2023-07-01', 'Ativo'),
('Fernanda Costa', '1987-02-05', 'Rua H, 505', '8888-8888', 'fernanda@email.com', '2023-08-01', 'Ativo'),
('Bruno Martins', '1993-06-25', 'Rua I, 606', '9999-9999', 'bruno@email.com', '2023-09-01', 'Ativo'),
('Renata Pereira', '1989-03-14', 'Rua J, 707', '1010-1010', 'renata@email.com', '2023-10-01', 'Ativo'),
('Thiago Ramos', '1986-12-01', 'Rua K, 808', '1111-1112', 'thiago@email.com', '2023-11-01', 'Ativo'),
('Juliana Barbosa', '1994-01-19', 'Rua L, 909', '1212-1212', 'juliana@email.com', '2023-12-01', 'Inativo'),
('Roberto Ferreira', '1990-05-17', 'Rua M, 111', '1313-1313', 'roberto@email.com', '2023-01-01', 'Ativo'),
('Débora Nascimento', '1985-08-27', 'Rua N, 222', '1414-1414', 'debora@email.com', '2023-02-01', 'Ativo'),
('Leonardo Pinto', '1992-07-09', 'Rua O, 333', '1515-1515', 'leonardo@email.com', '2023-03-01', 'Ativo');

-- Populando a tabela Instrutor
INSERT INTO Instrutor (Nome, Especialidade, Certificacoes, AnosExperiencia, Email)
VALUES
('Alice', 'Cardio', 'Certificação A', 5, 'alice@email.com'),
('Bruno', 'Musculação', 'Certificação B', 7, 'bruno@email.com'),
('Carlos', 'Yoga', 'Certificação C', 10, 'carlos@email.com'),
('Daniela', 'Pilates', 'Certificação D', 8, 'daniela@email.com'),
('Eduardo', 'Crossfit', 'Certificação E', 6, 'eduardo@email.com'),
('Fernanda', 'Zumba', 'Certificação F', 9, 'fernanda@email.com'),
('Gabriel', 'Cardio', 'Certificação G', 4, 'gabriel@email.com'),
('Helena', 'Musculação', 'Certificação H', 5, 'helena@email.com'),
('Igor', 'Yoga', 'Certificação I', 7, 'igor@email.com'),
('Julia', 'Pilates', 'Certificação J', 10, 'julia@email.com'),
('Kleber', 'Crossfit', 'Certificação K', 8, 'kleber@email.com'),
('Larissa', 'Zumba', 'Certificação L', 6, 'larissa@email.com'),
('Marcos', 'Cardio', 'Certificação M', 9, 'marcos@email.com'),
('Natalia', 'Musculação', 'Certificação N', 4, 'natalia@email.com'),
('Otavio', 'Yoga', 'Certificação O', 5, 'otavio@email.com');

-- Populando a tabela Plano_de_Treinamento
INSERT INTO Plano_de_Treinamento (Nome, Descricao, Duracao, DataInicio, DataFim, ID_Equipamento)
VALUES
('Plano Básico', 'Acesso livre', 30, '2023-01-01', '2023-12-31', 1),
('Plano Premium', 'Acesso + Personal Trainer', 30, '2023-01-01', '2023-12-31', 2),
('Plano VIP', 'Acesso total', 30, '2023-01-01', '2023-12-31', 3),
('Plano Família', 'Acesso para família', 30, '2023-01-01', '2023-12-31', 4),
('Plano Estudante', 'Acesso para estudantes', 30, '2023-01-01', '2023-12-31', 5),
('Plano Senior', 'Acesso para idosos', 30, '2023-01-01', '2023-12-31', 6),
('Plano Corporativo', 'Acesso para empresas', 30, '2023-01-01', '2023-12-31', 7),
('Plano Fit', 'Acesso + Nutricionista', 30, '2023-01-01', '2023-12-31', 8),
('Plano Yoga', 'Acesso às aulas de Yoga', 30, '2023-01-01', '2023-12-31', 9),
('Plano Pilates', 'Acesso às aulas de Pilates', 30, '2023-01-01', '2023-12-31', 10),
('Plano Crossfit', 'Acesso às aulas de Crossfit', 30, '2023-01-01', '2023-12-31', 11),
('Plano Zumba', 'Acesso às aulas de Zumba', 30, '2023-01-01', '2023-12-31', 12),
('Plano Cardio', 'Acesso às aulas de Cardio', 30, '2023-01-01', '2023-12-31', 13),
('Plano Musculação', 'Acesso às aulas de Musculação', 30, '2023-01-01', '2023-12-31', 14),
('Plano Personal', 'Acesso com Personal Trainer', 30, '2023-01-01', '2023-12-31', 15);

-- Populando a tabela Inscrição
INSERT INTO Inscricao (ID_Aluno, ID_Plano, DataInscricao, Status, DataExpiracao)
VALUES
(1, 1, '2023-01-01', 'Ativo', '2023-12-31'),
(2, 2, '2023-02-01', 'Ativo', '2023-12-31'),
(3, 3, '2023-03-01', 'Inativo', '2023-12-31'),
(4, 4, '2023-04-01', 'Ativo', '2023-12-31'),
(5, 5, '2023-05-01', 'Ativo', '2023-12-31'),
(6, 6, '2023-06-01', 'Inativo', '2023-12-31'),
(7, 7, '2023-07-01', 'Ativo', '2023-12-31'),
(8, 8, '2023-08-01', 'Ativo', '2023-12-31'),
(9, 9, '2023-09-01', 'Ativo', '2023-12-31'),
(10, 10, '2023-10-01', 'Ativo', '2023-12-31'),
(11, 11, '2023-11-01', 'Ativo', '2023-12-31'),
(12, 12, '2023-12-01', 'Inativo', '2023-12-31'),
(13, 13, '2023-01-01', 'Ativo', '2023-12-31'),
(14, 14, '2023-02-01', 'Ativo', '2023-12-31'),
(15, 15, '2023-03-01', 'Ativo', '2023-12-31');

-- Populando a tabela Avaliacao_Fisica
INSERT INTO Avaliacao_Fisica (ID_Aluno, ID_Instrutor, Data, Peso, Altura, GorduraCorp, MassaMagra, Pressao, Observacoes)
VALUES
(1, 1, '2023-01-01', 70.0, 1.75, 20.0, 50.0, '120/80', 'Nenhuma'),
(2, 2, '2023-02-01', 60.0, 1.65, 22.0, 45.0, '120/80', 'Nenhuma'),
(3, 3, '2023-03-01', 80.0, 1.80, 25.0, 55.0, '130/85', 'Nenhuma'),
(4, 4, '2023-04-01', 90.0, 1.85, 30.0, 60.0, '140/90', 'Nenhuma'),
(5, 5, '2023-05-01', 75.0, 1.70, 18.0, 52.0, '120/80', 'Nenhuma'),
(6, 6, '2023-06-01', 65.0, 1.60, 20.0, 48.0, '110/70', 'Nenhuma'),
(7, 7, '2023-07-01', 85.0, 1.90, 28.0, 58.0, '130/85', 'Nenhuma'),
(8, 8, '2023-08-01', 55.0, 1.55, 25.0, 40.0, '120/80', 'Nenhuma'),
(9, 9, '2023-09-01', 95.0, 1.95, 35.0, 65.0, '140/90', 'Nenhuma'),
(10, 10, '2023-10-01', 70.0, 1.75, 20.0, 50.0, '120/80', 'Nenhuma'),
(11, 11, '2023-11-01', 60.0, 1.65, 22.0, 45.0, '120/80', 'Nenhuma'),
(12, 12, '2023-12-01', 80.0, 1.80, 25.0, 55.0, '130/85', 'Nenhuma'),
(13, 13, '2023-01-01', 90.0, 1.85, 30.0, 60.0, '140/90', 'Nenhuma'),
(14, 14, '2023-02-01', 75.0, 1.70, 18.0, 52.0, '120/80', 'Nenhuma'),
(15, 15, '2023-03-01', 65.0, 1.60, 20.0, 48.0, '110/70', 'Nenhuma');

-- Populando a tabela Treino
INSERT INTO Treino (ID_Instrutor, ID_Equipamento, Horario, Duracao, Capacidade, Sala)
VALUES
(1, 1, '08:00:00', 60, 10, 'Sala 1'),
(2, 2, '09:00:00', 60, 15, 'Sala 2'),
(3, 3, '10:00:00', 60, 20, 'Sala 3'),
(4, 4, '11:00:00', 60, 25, 'Sala 4'),
(5, 5, '12:00:00', 60, 10, 'Sala 5'),
(6, 6, '13:00:00', 60, 15, 'Sala 6'),
(7, 7, '14:00:00', 60, 20, 'Sala 7'),
(8, 8, '15:00:00', 60, 25, 'Sala 8'),
(9, 9, '16:00:00', 60, 10, 'Sala 9'),
(10, 10,'17:00:00', 60, 15, 'Sala 10'),
(11, 11,'18:00:00', 60, 20, 'Sala 11'),
(12, 12,'19:00:00', 60, 25, 'Sala 12'),
(13, 13,'20:00:00', 60, 10, 'Sala 13'),
(14, 14,'21:00:00', 60, 15, 'Sala 14'),
(15, 15,'22:00:00', 60, 20, 'Sala 15');

-- Populando a tabela Check-in/Check-out
INSERT INTO Check_in_Check_out (ID_Aluno, Data, HoraEntrada, HoraSaida)
VALUES
(1, '2023-01-01', '08:00:00', '09:00:00'),
(2, '2023-02-01', '09:00:00', '10:00:00'),
(3, '2023-03-01', '10:00:00', '11:00:00'),
(4, '2023-04-01', '11:00:00', '12:00:00'),
(5, '2023-05-01', '12:00:00', '13:00:00'),
(6, '2023-06-01', '13:00:00', '14:00:00'),
(7, '2023-07-01', '14:00:00', '15:00:00'),
(8, '2023-08-01', '15:00:00', '16:00:00'),
(9, '2023-09-01', '16:00:00', '17:00:00'),
(10, '2023-10-01', '17:00:00', '18:00:00'),
(11, '2023-11-01', '18:00:00', '19:00:00'),
(12, '2023-12-01', '19:00:00', '20:00:00'),
(13, '2023-01-01', '08:00:00', '09:00:00'),
(14, '2023-02-01', '09:00:00', '10:00:00'),
(15, '2023-03-01', '10:00:00', '11:00:00');

-- Populando a tabela Pagamento
INSERT INTO Pagamento (ID_Aluno, Valor, Data, Metodo, Status)
VALUES
(1, 100.0, '2023-01-01', 'Cartão', 'Pago'),
(2, 200.0, '2023-02-01', 'Cartão', 'Pago'),
(3, 300.0, '2023-03-01', 'Cartão', 'Pendente'),
(4, 400.0, '2023-04-01', 'Cartão', 'Pago'),
(5, 500.0, '2023-05-01', 'Cartão', 'Pago'),
(6, 600.0, '2023-06-01', 'Cartão', 'Pendente'),
(7, 700.0, '2023-07-01', 'Cartão', 'Pago'),
(8, 800.0, '2023-08-01', 'Cartão', 'Pago'),
(9, 900.0, '2023-09-01', 'Cartão', 'Pago'),
(10, 1000.0, '2023-10-01', 'Cartão', 'Pago'),
(11, 1100.0, '2023-11-01', 'Cartão', 'Pago'),
(12, 1200.0, '2023-12-01', 'Cartão', 'Pendente'),
(13, 1300.0, '2023-01-01', 'Cartão', 'Pago'),
(14, 1400.0, '2023-02-01', 'Cartão', 'Pago'),
(15, 1500.0, '2023-03-01', 'Cartão', 'Pago');


/*View de Membros Ativos por Tipo de Plano:
Esta view mostrará o número de membros ativos matriculados em cada tipo de plano de treinamento.
*/
CREATE VIEW vw_Membros_Ativos_Por_Plano AS
SELECT
    P.Nome AS Nome_Plano,
    COUNT(I.ID_Inscricao) AS Quantidade_Membros_Ativos
FROM
    Inscricao I
JOIN
    Plano_de_Treinamento P ON I.ID_Plano = P.ID_Plano
WHERE
    I.Status = 'Ativo'
GROUP BY
    P.Nome;
-----------------------------------------------------
/*View de Receita Mensal por Ano e Mês:
Esta view calcula a receita total gerada por mês no último ano.*/
CREATE VIEW vw_Receita_Mensal AS
SELECT
    DATE_TRUNC('month', P.Data) AS Ano_Mes,
    SUM(P.Valor) AS Receita_Total
FROM
    Pagamento P
WHERE
    P.Data >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY
    Ano_Mes;
-----------------------------------------------------
/*View de Quantidade de Membros por Instrutor:
Esta view mostra quantos membros cada instrutor está treinando atualmente.*/
CREATE VIEW vw_Membros_Por_Instrutor AS
SELECT
    I.Nome AS Nome_Instrutor,
    COUNT(DISTINCT C.ID_Aluno) AS Quantidade_Membros
FROM
    Instrutor I
LEFT JOIN
    Treino T ON I.ID_Instrutor = T.ID_Instrutor
LEFT JOIN
    Check_in_Check_out C ON T.ID_Aula = C.ID_Checkin
GROUP BY
    I.Nome;

-- Criar o trigger
CREATE OR REPLACE FUNCTION atualizar_quantidade_equipamento()
RETURNS TRIGGER AS $$
BEGIN
    -- Verifica se a inscrição está ativando o plano
    IF NEW.Status = 'Ativo' THEN
        -- Atualiza a quantidade de equipamentos disponíveis
        UPDATE Equipamento
        SET Quantidade = Quantidade - 1
        WHERE ID_Equipamento = NEW.ID_Equipamento;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Associar o trigger à tabela Inscricao
CREATE TRIGGER inscricao_trigger
AFTER INSERT ON Inscricao
FOR EACH ROW
EXECUTE FUNCTION atualizar_quantidade_equipamento();


-- Criando a trigger
CREATE OR REPLACE FUNCTION atualizar_status_aluno()
RETURNS TRIGGER AS $$
DECLARE
    total_pago DECIMAL(10, 2);
    novo_status VARCHAR(50);
BEGIN
    -- Calcula o total pago pelo aluno
    SELECT SUM(p.Valor)
    INTO total_pago
    FROM Pagamento p
    WHERE p.ID_Aluno = NEW.ID_Aluno;

    -- Lógica para determinar o novo status do aluno
    IF total_pago >= 500.00 THEN
        novo_status := 'Regular';
    ELSE
        novo_status := 'Inadimplente';
    END IF;

    -- Atualiza o status do aluno na tabela Aluno
    UPDATE Aluno
    SET Status = novo_status
    WHERE ID_Aluno = NEW.ID_Aluno;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

--Teste da trigger
-- Inserir um aluno de exemplo
INSERT INTO Aluno (Nome, DataNasc, Endereco, Telefone, Email, DataInicio, Status)
VALUES ('George', '1990-05-15', 'Rua das Flores, 123', '(11) 9999-8888', 'joao.silva@example.com', '2020-01-01', 'Inadimplente');

-- Inserir pagamentos de exemplo para o aluno criado
INSERT INTO Pagamento (ID_Aluno, Valor, Data, Metodo, Status)
VALUES (1, 600.00, '2024-06-01', 'Cartão de Crédito', 'Confirmado');

INSERT INTO Pagamento (ID_Aluno, Valor, Data, Metodo, Status)
VALUES (2, 20.00, '2024-06-15', 'Boleto Bancário', 'Confirmado');

SELECT Status
FROM Aluno
WHERE ID_Aluno = 1;



--Esta função insere um novo aluno na tabela Aluno e retorna o ID do aluno inserido.

CREATE OR REPLACE FUNCTION inserir_aluno(
    p_id_aluno INT,
    p_nome VARCHAR(100),
    p_data_nasc DATE,
    p_endereco VARCHAR(255),
    p_telefone VARCHAR(20),
    p_email VARCHAR(100),
    p_data_inicio DATE,
    p_status VARCHAR(50)
) RETURNS INT AS $$
BEGIN
    -- Insere um novo aluno com o ID especificado
    INSERT INTO Aluno (ID_Aluno, Nome, DataNasc, Endereco, Telefone, Email, DataInicio, Status)
    VALUES (p_id_aluno, p_nome, p_data_nasc, p_endereco, p_telefone, p_email, p_data_inicio, p_status);
    
    RETURN p_id_aluno;
END;
$$ LANGUAGE plpgsql;



--Esta função calcula o IMC de um aluno com base no peso e altura registrados em uma avaliação física.
CREATE OR REPLACE FUNCTION calcular_imc(
    p_peso DECIMAL(5, 2),
    p_altura DECIMAL(4, 2)
) RETURNS DECIMAL(5, 2) AS $$
DECLARE
    imc DECIMAL(5, 2);
BEGIN
    imc := p_peso / (p_altura * p_altura);
    RETURN imc;
END;
$$ LANGUAGE plpgsql;
--Esta função atualiza o status de pagamento de um aluno na tabela Pagamento com base no ID do aluno e na data do pagamento.
CREATE OR REPLACE FUNCTION atualizar_status_pagamento(
    p_id_aluno INT,
    p_data_pagamento DATE,
    p_status VARCHAR(50)
) RETURNS VOID AS $$
BEGIN
    UPDATE Pagamento
    SET Status = p_status
    WHERE ID_Aluno = p_id_aluno
      AND Data = p_data_pagamento;
END;
$$ LANGUAGE plpgsql;


-- Função para calcular a idade de um aluno
CREATE OR REPLACE FUNCTION calcular_idade(ID_Aluno INT)
RETURNS INT AS $$
DECLARE
    idade INT;
BEGIN
    SELECT DATE_PART('year', AGE(DataNasc))
    INTO idade
    FROM Aluno
    WHERE Aluno.ID_Aluno = calcular_idade.ID_Aluno; -- Qualificação da coluna ID_Aluno
    
    RETURN idade;
END;
$$ LANGUAGE plpgsql;


-- Função para verificar a manutenção pendente em um equipamento
CREATE OR REPLACE FUNCTION verificar_manutencao_pendente(ID_Equipamento INT)
RETURNS BOOLEAN AS $$
DECLARE
    manutencao_pendente BOOLEAN;
BEGIN
    SELECT ManutencaoPendente
    INTO manutencao_pendente
    FROM Equipamento
    WHERE Equipamento.ID_Equipamento = verificar_manutencao_pendente.ID_Equipamento; -- Qualificação da coluna ID_Equipamento
    
    RETURN manutencao_pendente;
END;
$$ LANGUAGE plpgsql;

-- Teste da função verificar_manutencao_pendente
SELECT verificar_manutencao_pendente(1) AS manutencao_pendente;


--functions

-- Testando a função inserir_aluno
SELECT inserir_aluno(23, 'Carine', '2005-06-16', 'Rua das Flores, 123', '(11) 98765-4321', 'carine.ghisi@gmail.com', '2023-01-10', 'Ativo');
SELECT inserir_aluno(46, 'Diogo', '2005-06-16', 'Rua das Flores, 123', '(11) 98765-4321', 'diogo@gmail.com', '2023-01-10', 'Inativo');
SELECT inserir_aluno(22, 'Vinicius', '2005-06-16', 'Rua das Flores, 123', '(11) 98765-4321', 'vinicius@gmail.com', '2023-01-10', 'Ativo');

-- Testando a função calcular_imc
SELECT calcular_imc(75.5, 1.80);
SELECT calcular_imc(65.2, 1.75);
SELECT calcular_imc(82.0, 1.90);
---------------------------------------------------
-- Testando a função atualizar_status_pagamento
UPDATE Pagamento SET Status = 'Pago' WHERE ID_Pagamento = 1;
SELECT atualizar_status_pagamento(1, '2023-01-15', 'Pago');
SELECT atualizar_status_pagamento(2, '2022-12-05', 'Pendente');
SELECT atualizar_status_pagamento(3, '2023-03-01', 'Pago');

CREATE INDEX idx_aluno_nome ON Aluno (Nome);
CREATE INDEX idx_aluno_data_inicio ON Aluno (DataInicio);
CREATE INDEX idx_aluno_status ON Aluno (Status);

--------------------------
CREATE INDEX idx_instrutor_nome ON Instrutor (Nome);
CREATE INDEX idx_instrutor_especialidade ON Instrutor (Especialidade);
-------------------------
CREATE INDEX idx_treino_instrutor ON Treino (ID_Instrutor);
CREATE INDEX idx_treino_horario ON Treino (Horario);
------------------------
CREATE INDEX idx_pagamento_aluno ON Pagamento (ID_Aluno);
CREATE INDEX idx_pagamento_data ON Pagamento (Data);

---------------------------------------------
-- Exemplo com a tabela Aluno e índice no campo Nome
EXPLAIN ANALYZE SELECT * FROM Aluno WHERE Nome = 'João Silva';
-- Exemplo com junção entre Aluno e Inscrição, usando índices
EXPLAIN ANALYZE SELECT A.Nome, I.ID_Plano 
FROM Aluno A
JOIN Inscricao I ON A.ID_Aluno = I.ID_Aluno
WHERE A.Status = 'Ativo';
-- Exemplo com ordenação usando índice
EXPLAIN ANALYZE SELECT * FROM Aluno ORDER BY DataInicio DESC;
EXPLAIN ANALYZE SELECT * FROM Aluno WHERE Nome = 'João Silva';
------------------------------------------------------------

--Quantos membros ativos estão matriculados em cada tipo de plano de assinatura?

SELECT
    p.Nome AS Plano,
    COUNT(i.ID_Aluno) AS MembrosAtivos
FROM
    Inscricao i
    JOIN Plano_de_Treinamento p ON i.ID_Plano = p.ID_Plano
WHERE
    i.Status = 'Ativo'
GROUP BY
    p.Nome;

----------------------------------------------------------
--Qual é a receita total gerada por mês no último ano?

SELECT
    DATE_TRUNC('month', P.Data) AS Ano_Mes,
    SUM(P.Valor) AS Receita_Total
FROM
    Pagamento P
WHERE
    P.Data >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY
    Ano_Mes;

------------------------------------------------------------
--Quais são as aulas mais populares e quantos membros estão inscritos em cada uma?

SELECT
    T.ID_Aula,
    COUNT(C.ID_Checkin) AS Quantidade_Membros,
    T.Sala
FROM
    Treino T
LEFT JOIN
    Check_in_Check_out C ON T.ID_Aula = C.ID_Checkin
GROUP BY
    T.ID_Aula, T.Sala
ORDER BY
    Quantidade_Membros DESC;

-----------------------------------------------------------
--Quantos membros cada treinador está treinando atualmente?
SELECT
    I.Nome AS Nome_Instrutor,
    COUNT(DISTINCT C.ID_Aluno) AS Quantidade_Membros
FROM
    Instrutor I
LEFT JOIN
    Treino T ON I.ID_Instrutor = T.ID_Instrutor
LEFT JOIN
    Check_in_Check_out C ON T.ID_Aula = C.ID_Checkin
GROUP BY
    I.Nome;